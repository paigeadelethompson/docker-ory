flush ruleset

define WAN_INTERFACE      = eth0
define INPUT_PRIO         = 0
define FORWARD_PRIO       = 0
define OUTPUT_PRIO        = 0
define PREROUTING_PRIO    = 0
define POSTROUTING_PRIO   = 0
define INGRESS_CONTROLLER = 100.64.48.6

table inet DEFAULT_FILTER {
  set ICMP_ALLOWED_NETWORKS6 {
    type ipv6_addr
    flags interval 
    elements = { fe80::/10, ff02::/8 }
  }

  set INGRESS_WHITE_LIST {
    type ipv4_addr
    flags interval 
    elements = { 0.0.0.0/0 }
  }

  set INGRESS_WHITE_LIST6 {
    type ipv6_addr
    flags interval 
    elements = { ::/128 }
  }

  set PORTS_TCP_IN_FORWARD {
    type inet_service;
    flags interval;
    elements = { 80, 443 }
  }

  map PORTS_TCP_FORWARD {
    type inet_service: ipv4_addr;
    elements = {
      80:   $INGRESS_CONTROLLER,
      443:  $INGRESS_CONTROLLER
    }
  }

  chain NAT_PREROUTING {
    type nat hook prerouting priority $PREROUTING_PRIO; policy accept;
    ip saddr 100.64.0.0/10 return
    ip protocol tcp dnat to tcp dport map @PORTS_TCP_FORWARD 
  }

  chain NAT_POSTROUTING {
    type nat hook postrouting priority $POSTROUTING_PRIO; policy accept;
    oifname $WAN_INTERFACE ip saddr { 100.64.48.0/20, 100.64.32.0/20 } masquerade

  }

  chain DROP_NAT_REDIRECT {
    log group 1 prefix "NAT_REDIRECT"
    log group 5
    drop
  }

  chain DOCKER_INPUT {
    ip daddr 100.64.48.0/20 ip saddr 100.64.0.0/10 jump DROP_NAT_REDIRECT
    ip daddr 100.64.48.0/20 ip saddr @INGRESS_WHITE_LIST tcp dport @PORTS_TCP_IN_FORWARD accept
    ip daddr { 100.64.48.0/20, 100.64.32.0/20 } ct state established accept
    ip daddr != 100.64.0.0/10 ct state established accept
    ip daddr 100.64.0.0/10 log group 1
    log group 1 prefix "INPUT"
    log group 4
    drop
  }

  chain UNREACHABLE {
    log group 1 prefix "REACHABILITY"
    log group 6
    drop
  }

  chain DOCKER_FORWARD {
    ip saddr 100.64.64.0/20 ip daddr 100.64.64.0/20 accept
    ip saddr @INGRESS_WHITE_LIST ip daddr 100.64.48.0/20 tcp dport @PORTS_TCP_IN_FORWARD accept
    ip6 saddr @INGRESS_WHITE_LIST6 tcp dport @PORTS_TCP_IN_FORWARD accept
    ip saddr { 100.64.16.0/20, 100.64.48.0/20 } ip daddr 100.64.32.0/20 accept
    ip saddr 100.64.32.0/20 ip daddr { 100.64.48.0/20, 100.64.16.0/20 } ct state established accept
    ip saddr != 100.64.0.0/10 ip daddr { 100.64.48.0/20, 100.64.32.0/20 } ct state established accept
    ip saddr 100.64.0.0/10 ip daddr { 100.64.48.0/20, 100.64.32.0/20 } jump UNREACHABLE
    ip saddr { 100.64.48.0/20, 100.64.32.0/20 } ip daddr != 100.64.0.0/10 accept
    log group 1 prefix "FORWARD"
    log group 2
    drop
  }

  chain DOCKER_OUTPUT {
    ip saddr { 100.64.48.0/20, 100.64.32.0/20 } ip daddr != 100.64.0.0/10 accept
    ip daddr 100.64.48.0/20 ip saddr != 100.64.0.0/10 accept
    log group 1 prefix "OUTPUT"
    log group 3
    drop
  }

  chain INPUT {
    type filter hook input priority $INPUT_PRIO; policy accept;
    meta nfproto { ipv4, ipv6 } tcp dport 22 accept
    meta iiftype loopback accept
    ip6 nexthdr icmpv6 ip6 saddr @ICMP_ALLOWED_NETWORKS6 accept
    ip saddr 100.64.0.0/10 jump DOCKER_INPUT
    ip daddr 100.64.0.0/10 jump DOCKER_INPUT
    ct state established accept
    log group 1 prefix "INPUT"
    log group 8
    drop
  }

  chain FORWARD {
    type filter hook forward priority $FORWARD_PRIO; policy accept;
    meta oiftype loopback accept
    ip saddr 100.64.0.0/10 jump DOCKER_FORWARD
    ip daddr 100.64.0.0/10 jump DOCKER_FORWARD
  }

  chain OUTPUT {
    type filter hook output priority $OUTPUT_PRIO; policy accept;
    meta oiftype loopback accept
    oif $WAN_INTERFACE meta nfproto { ipv6 } accept
    ip saddr 100.64.0.0/10 jump DOCKER_OUTPUT
    ip daddr 100.64.0.0/10 jump DOCKER_OUTPUT
  }
}
